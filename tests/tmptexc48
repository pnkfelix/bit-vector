extern crate bit_vector;
extern crate crossbeam;

use bit_vector::BitVector;

#[test]
fn test_parallel_set() {
	let mut vec: BitVector<u8> = BitVector::with_capacity(32);

	//TODO introduce new scope here
	let (mut left, mut right) = vec.split_at_mut(16);

	let (mut first, mut second) = left.split_at_mut(8);
	let (mut third, mut fourth) = right.split_at_mut(8);

	let mut handles = vec![];

	crossbeam.scope(|scope| {
		let handle = scope.spawn(|| {
			first.set(0, true);
			first.set(1, true);
			first.set(2, false);
			first.set(3, false);
			first.set(4, true);
			first.set(5, false);
			first.set(6, true);
			first.set(7, false);
		});
		handles.push(handle);

		let handle = scope.spawn(|| {
			second.set(0, false);
			second.set(1, true);
			second.set(2, false);
			second.set(3, true);
			second.set(4, true);
			second.set(5, true);
			second.set(6, false);
			second.set(7, true);
		});
		handles.push(handle);

		let handle = scope.spawn(|| {
			third.set(0, false);
			third.set(1, false);
			third.set(2, true);
			third.set(3, false);
			third.set(4, true);
			third.set(5, false);
			third.set(6, true);
			third.set(7, true);
		});
		handles.push(handle);

		let handle = scope.spawn(|| {
			fourth.set(0, true);
			fourth.set(1, true);
			fourth.set(2, false);
			fourth.set(3, true);
			fourth.set(4, true);
			fourth.set(5, false);
			fourth.set(6, false);
			fourth.set(7, true);
		});
		handles.push(handle);
	});

	for handle i
}